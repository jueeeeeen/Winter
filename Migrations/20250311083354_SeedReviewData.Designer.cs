// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Winter_Project.Models;

#nullable disable

namespace Winter_Project.Migrations
{
    [DbContext(typeof(WinterContext))]
    [Migration("20250311083354_SeedReviewData")]
    partial class SeedReviewData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Winter_Project.Models.ActivityModel", b =>
                {
                    b.Property<int>("Activity_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Activity_time")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Approval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Create_time")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Deadline_time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Max_member")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Activity_id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Winter_Project.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Activity_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Winter_Project.Models.FriendModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FriendId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFriend")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPending")
                        .HasColumnType("INTEGER");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Winter_Project.Models.NotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Activity_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Activity_user_id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Notification_time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notification_type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("User_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Winter_Project.Models.ParticipantModel", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("Activity_id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("Join_time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Username", "Activity_id");

                    b.HasIndex("Activity_id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Winter_Project.Models.RequirementModel", b =>
                {
                    b.Property<int>("Requirement_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Activity_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Requirement_id");

                    b.HasIndex("Activity_id")
                        .IsUnique();

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Winter_Project.Models.ReviewModel", b =>
                {
                    b.Property<int>("Review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Activity_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("Reviewed_user")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reviewer")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Review_id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Review_id = 1,
                            Activity_id = 101,
                            Comment = "Great!",
                            Rating = 4.5f,
                            Reviewed_user = "Alice",
                            Reviewer = "UserA",
                            Time = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 2,
                            Activity_id = 102,
                            Comment = "Excellent!",
                            Rating = 5f,
                            Reviewed_user = "Alice",
                            Reviewer = "UserB",
                            Time = new DateTime(2024, 1, 2, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 3,
                            Activity_id = 103,
                            Comment = "Good job",
                            Rating = 3.8f,
                            Reviewed_user = "Bob",
                            Reviewer = "UserC",
                            Time = new DateTime(2024, 1, 3, 10, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 4,
                            Activity_id = 104,
                            Comment = "Needs improvement",
                            Rating = 2.5f,
                            Reviewed_user = "Charlie",
                            Reviewer = "UserD",
                            Time = new DateTime(2024, 1, 4, 18, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 5,
                            Activity_id = 105,
                            Comment = "Nice work",
                            Rating = 4.2f,
                            Reviewed_user = "Bob",
                            Reviewer = "UserE",
                            Time = new DateTime(2024, 1, 5, 8, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 6,
                            Activity_id = 106,
                            Comment = "Average",
                            Rating = 3.5f,
                            Reviewed_user = "Charlie",
                            Reviewer = "UserF",
                            Time = new DateTime(2024, 1, 6, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 7,
                            Activity_id = 107,
                            Comment = "Amazing!",
                            Rating = 4.8f,
                            Reviewed_user = "Alice",
                            Reviewer = "UserG",
                            Time = new DateTime(2024, 1, 7, 9, 25, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 8,
                            Activity_id = 108,
                            Comment = "Pretty good",
                            Rating = 3.9f,
                            Reviewed_user = "Bob",
                            Reviewer = "UserH",
                            Time = new DateTime(2024, 1, 8, 16, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 9,
                            Activity_id = 109,
                            Comment = "Could be better",
                            Rating = 2f,
                            Reviewed_user = "Charlie",
                            Reviewer = "UserI",
                            Time = new DateTime(2024, 1, 9, 13, 5, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Review_id = 10,
                            Activity_id = 110,
                            Comment = "Nice!",
                            Rating = 4.2f,
                            Reviewed_user = "Alice",
                            Reviewer = "UserJ",
                            Time = new DateTime(2024, 1, 10, 20, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Winter_Project.Models.UserBio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MyHobby")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MyInterests")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "I enjoy storytelling and writing about various topics.",
                            Bio = "Creative writer and avid reader.",
                            Location = "Los Angeles, USA",
                            MyHobby = "Painting, Traveling",
                            MyInterests = "Writing, Art, Literature",
                            Phone = "+1-555-5678",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Winter_Project.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateOnly(1995, 6, 15),
                            Email = "john@example.com",
                            FirstName = "John",
                            Gender = "male",
                            LastName = "Doe",
                            PasswordHash = "A6xnQhbz4Vx2HuGl4lXwZ5U2I8iziLRFnhP5eNfIRvQ=",
                            Username = "test1"
                        });
                });

            modelBuilder.Entity("Winter_Project.Models.FriendModel", b =>
                {
                    b.HasOne("Winter_Project.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Winter_Project.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Winter_Project.Models.ParticipantModel", b =>
                {
                    b.HasOne("Winter_Project.Models.ActivityModel", null)
                        .WithMany("Participants")
                        .HasForeignKey("Activity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Winter_Project.Models.RequirementModel", b =>
                {
                    b.HasOne("Winter_Project.Models.ActivityModel", null)
                        .WithOne("Requirement")
                        .HasForeignKey("Winter_Project.Models.RequirementModel", "Activity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Winter_Project.Models.UserBio", b =>
                {
                    b.HasOne("Winter_Project.Models.UserModel", "User")
                        .WithMany("UserBios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Winter_Project.Models.ActivityModel", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Requirement")
                        .IsRequired();
                });

            modelBuilder.Entity("Winter_Project.Models.UserModel", b =>
                {
                    b.Navigation("UserBios");
                });
#pragma warning restore 612, 618
        }
    }
}
