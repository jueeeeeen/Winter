@{
    ViewData["Title"] = "Create";
}

<form class="create-container" id="create_activity_form">
    <div class="create-card">
        <div class="create-header">
            <p>Details</p>
        </div>
        <div class="create-details">
            <div class="form-group">
                <label for="create_title">Activity Title :</label>
                <input type="text" name="Title" id="create_title" placeholder="Activity title must not exceed 30 characters." required/>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label for="create_detail">Activity Details :</label>
                <textarea rows="6" type="text" name="Detail" id="create_detail" placeholder="Activity details must not exceed 500 characters." required></textarea>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label for="create_date_time">Activity Date - Time :</label>
                <input type="datetime-local" name="Activity_time" id="create_date_time" required/>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label for="dead_line_date_time">Join Deadline :</label>
                <input type="datetime-local" name="Deadline_time" id="dead_line_date_time" required/>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label for="duration">Duration :</label>
                <select name="Duration" id="duration" required>
                    <option value="00:30">00:30</option>
                    <option value="01:00">01:00</option>
                    <option value="01:30">01:30</option>
                    <option value="02:00">02:00</option>
                    <option value="02:30">02:30</option>
                    <option value="03:00">03:00</option>
                    <option value="03:30">03:30</option>
                    <option value="04:00">04:00</option>
                    <option value="04:30">04:30</option>
                    <option value="05:00">05:00</option>
                    <option value="05:30">05:30</option>
                    <option value="06:00">06:00</option>
                </select>
            </div>
            <div class="form-group">
                <label for="create_location">Location :</label>
                <input type="text" name="Location" id="create_location" placeholder="Location must not exceed 30 characters." required/>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label >Number of member (Include yourself) :</label>
                <number-input data-name="Max_member" default-value="2" id="max_member"></number-input>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label>Tags :</label>
                <tag-select id="tag"></tag-select>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group create-tag">
                <label>Membership Approval :</label>
                <div class="radio-input">
                    <div class="radio-input-choice">
                        <input type="radio" name="Approval" value="true" required/>
                        <p>All members must be approved</p>
                    </div>
                    <div class="radio-input-choice">
                        <input type="radio" name="Approval" value="false" required checked/>
                        <p>Approval not needed</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="create-card">
        <div class="create-header">
            <p>Requirements (Optional)</p>
        </div>
        <div class="create-details">
            <div class="form-group">
                <label>Gender :</label>
                <div class="radio-input">
                    <div class="radio-input-choice">
                        <input type="radio" name="Gender" value="male"/>
                        <p>Male</p>
                    </div>
                    <div class="radio-input-choice">
                        <input type="radio" name="Gender" value="female"/>
                        <p>Female</p>
                    </div>
                    <div class="radio-input-choice">
                        <input type="radio" name="Gender" value="lgbtq"/>
                        <p>LGBTQ+</p>
                    </div>
                    <div class="radio-input-choice">
                        <input type="radio" name="Gender" value="none" checked/>
                        <p>None</p>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Minimum Age :</label>
                <number-input data-name="Age" default-value="0" id="age"></number-input>
                <span class="create-error-message"></span>
            </div>
            <div class="form-group">
                <label for="create_other">Other :</label>
                <input type="text" name="Other" id="create_other" placeholder="Other Requirement must not exceed 30 characters."/>
                <span class="create-error-message"></span>
            </div>
        </div>
    </div>
    <div class="last-card">
        <div class="check-before" id=check-before>
            <input name="Accept" id="accept" type="checkbox" required/>
            <p>By creating an activity, you agree to our <span class="red">Terms of Use</span> and <span class="red">Privacy Policy</span>.</p>
        </div>
        <button type="button" class="btn round medium create-btn" onclick="submit_create_activity()" id="create-activity-btn">
            <img src="assets/plus-w.svg" alt="plus icon">Create
        </button>
    </div>
</form>

<script>

    document.getElementById("create_date_time").addEventListener("change", function() {
        const activityTime = this.value;
        const deadlineInput = document.getElementById("dead_line_date_time");
        
        deadlineInput.value = activityTime;
    });

    function showError(inputId, message='') {
        const inputField = document.getElementById(inputId);
        if (message){
            const errorSpan = inputField.nextElementSibling;

            if (errorSpan) {
                errorSpan.textContent = message;
            }
        }

        inputField.classList.add('shake');

        setTimeout(() => {
            inputField.classList.remove('shake');
        }, 2000);
    }

    function clearErrors() {
        document.querySelectorAll(".create-error-message").forEach(span => span.textContent = "");
    }

    async function submit_create_activity() {
        clearErrors();

        const form = document.getElementById("create_activity_form");
        const formData = new FormData(form);

        const title = formData.get("Title")?.trim();
        const detail = formData.get("Detail")?.trim();
        const activityTime = formData.get("Activity_time");
        const deadlineTime = formData.get("Deadline_time");
        const duration = formData.get("Duration");
        const location = formData.get("Location")?.trim();
        const maxMember = parseInt(formData.get("Max_member")) || 0;
        const tag = formData.getAll("Tags").length;
        const age = parseInt(formData.get("Age")) || 0;
        const other = formData.get("Other")?.trim();
        const accept = formData.get("Accept");

        let isValid = true;
        let firstError = null;

        if (!title) {
            showError("create_title", "Please enter an activity title.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_title");
        } else if (title.length > 30) {
            showError("create_title", "Activity title must not exceed 30 characters.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_title");
        }
        if (!detail) {
            showError("create_detail", "Please enter an activity details.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_detail");
        } else if (detail.length > 500) {
            showError("create_detail", "Activity details must not exceed 500 characters.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_detail");
        }
        if (!activityTime) {
            showError("create_date_time", "Please specify the activity date and time.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_date_time");
        }
        else {
            const now = new Date();
            const minActivityTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);
            const activityDate = new Date(activityTime);
            @* if (activityDate <= minActivityTime) {
                showError("create_date_time", "Activity time must be at least 24 hours from now.");
                isValid = false;
                if (!firstError) firstError = document.getElementById("create_date_time");
            } *@
        }
        if (!deadlineTime) {
            showError("dead_line_date_time", "Please specify the join deadline date and time.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("dead_line_date_time");
        }
        else {
            const now = new Date();
            const minDeadlineTime = new Date(now.getTime() + 12 * 60 * 60 * 1000);
            const deadlineDate = new Date(deadlineTime);
            const activityDate = new Date(activityTime);
            @* if (deadlineDate < minDeadlineTime) {
                showError("dead_line_date_time", "Deadline time must be at least 12 hours from now.");
                isValid = false;
                if (!firstError) firstError = document.getElementById("dead_line_date_time");
            }
            else if (deadlineDate > activityDate) {
                showError("dead_line_date_time", "Deadline time must be before or equal to activity time.");
                isValid = false;
                if (!firstError) firstError = document.getElementById("dead_line_date_time");
            } *@
        }
        if (!duration) {
            showError("duration", "Please specify the duration.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("duration");
        }
        if (!location) {
            showError("create_location", "Please specify the location.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_location");
        } else if (location.length > 30) {
            showError("create_location", "Location must not exceed 30 characters.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_location");
        }
        if (maxMember <= 1) {
            showError("max_member", "The number of members must be greater than 1.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("max_member");
        }
        if (tag == 0){
            showError("tag", "You must select 1 - 3 tags.");
            isValid = false;
        }
        if (age > 100) {
            showError("age", "Age Requirement must be less than 100.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("age");
        }
        if (other.length > 30) {
            showError("create_other", "Other Requirement must not exceed 30 characters.");
            isValid = false;
            if (!firstError) firstError = document.getElementById("create_other");
        }
        if (!accept) {
            isValid = false;
            const checkBeforeContainer = document.getElementById('check-before');
            checkBeforeContainer.classList.add('shake');
            setTimeout(() => {
                checkBeforeContainer.classList.remove('shake');
            }, 2000);
        }

        if (!isValid) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            return;
        }

        const data = {
            Owner: '@ViewData["Username"]',
            Title: formData.get("Title"),
            Detail: formData.get("Detail"),
            Activity_time: formData.get("Activity_time"),
            Deadline_time: formData.get("Deadline_time"),
            Duration: formData.get("Duration"),
            Location: formData.get("Location"),
            Max_member: parseInt(formData.get("Max_member")) || 0,
            Approval: formData.get("Approval") === "true",
            Tags: formData.getAll("Tags"),
            Requirement: {
                Gender: formData.get("Gender"),
                Age: parseInt(formData.get("Age")) || 0,
                Other: formData.get("Other"),
            },
        };

        console.log(JSON.stringify(data));

        await fetch('http://localhost:5115/Create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            alert(`Activity created successfully !`);
        
            window.location.href = `/ActivityDetail/${result.activityId}`;
        })
        .catch(error => {
            console.error(error);
        });
        
    }
</script>