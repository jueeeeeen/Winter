@{
    ViewData["Title"] = "My Activity";
}

<select-activities></select-activities>
<activities-list></activities-list>
<custom-pagination id="activity-pagination"></custom-pagination>

<script>

    window.onload = () => {
        const selectActivities = document.querySelector("select-activities");
        const activityList = document.querySelector("activities-list");
        const ratingPopup = document.querySelector("rating-popup")
        const activity_pagination = document.querySelector('custom-pagination');

        var activityType = "upcoming";
        var username = "test1"
        fetchActivities();
        selectActivities.querySelector("#Upcoming_button").addEventListener("click", () => {
            activityType = "upcoming";
            fetchActivities();
        });
        selectActivities.querySelector("#History_button").addEventListener("click", () => {
            activityType = "history";
            fetchActivities();
        });

        activity_pagination.addEventListener("page-changed", (event) => {
            fetchActivities(event.detail.page);
        });

        async function fetchActivities(page = 1) {
        fetch(`/MyActivity/GetActivities?activityType=${activityType}&page=${page}`)
        .then(response => response.json())
        .then(data => {
            const activities = data.activities;
            console.log(activities)
            if (activities.length === 0) {
                const activity_list = activityList.querySelector("#activities");
                activity_list.innerHTML = "Activity not found";
                activity_list.classList.add("activity-not-found")
            }
            else {
                const activity_list = activityList.querySelector("#activities");
                if (activity_list.classList.contains("activity-not-found")){
                    activity_list.classList.remove("activity-not-found")
                }
                if (!Array.isArray(activities)) {
                    console.error("activities is not an array or is missing:", activities);
                    return;
                }

                activity_list.innerHTML = "";
                activities.forEach((activity) => {
                    const activityElement = new ActivityDropdown(activity, data.curusername,activityType );
                    activity_list.appendChild(activityElement);
                });

                if (data.max_page) {
                    activity_pagination.render(parseInt(data.max_page));
                }

            }
        })
        .catch(error => console.error("Fetch error:", error));
        }
    }
</script>