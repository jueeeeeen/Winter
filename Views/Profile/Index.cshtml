@{
    ViewData["Title"] = "Profile";
    var friendStatus = ViewBag.FriendStatus ?? "No relationship";
}

<div class="profile-container">
    <div class="profile-card">
        <div class="profile-header">
            <p>Profile</p>
        </div>
        
        <div class="account-info">
            <img src="@(string.IsNullOrEmpty(Model.ProfilePictureBase64) ? Url.Content("~/assets/Profile-w-b.png") : Model.ProfilePictureBase64)" alt="profile picture" class="profile-picture">
            <p class="username">@("@"+Model.Username)</p>
            <p class="full-name">@Model.FirstName @Model.LastName</p>
            <p class="age">@(DateTime.Now.Year - Model.DateOfBirth.Year) years old</p>
        </div>

        <div class="profile-details">
            <div>
                <img src="\assets\location_b.svg" alt="location">
                <p>@(string.IsNullOrEmpty(Model.Location) ? "No information" : Model.Location)</p>
            </div>
            <div>
                <img src="\assets\phone.svg" alt="phone"> 
                <p>@(string.IsNullOrEmpty(Model.Phone) ? "No information" : Model.Phone)</p>
            </div>
            <div>
                <img src="\assets\mail.svg" alt="mail">
                <p>@Model.Email</p>
            </div>
        </div>

        <div class="profile-rating">
            <p>‚≠ê @Model.AverageRating</p>
        </div>

        <div class="joined-review">
            <div class="profile-joined">
                <p>@Model.ActivityCount</p>
                <p>Joined</p>
                <a href="/ActivityProfile/@Model.Username">View all activity</a>
            </div>

            <div class="profile-reviews">
                <p>@Model.ReviewCount</p>
                <p>Reviews</p>
                <a href="/Profile/Review/@Model.Username">View all review</a>
            </div>
        </div>
    </div>

    <div class="profile-right-container">
        <div class="bio-card">
            <div class="profile-header">
                <p>Bio</p>
            </div>

            <div class="bio-details">
                <p class="bio-header">About me</p>
                <p class="bio-info">@(string.IsNullOrEmpty(Model.AboutMe) ? "No information" : Model.AboutMe)</p>
                <p class="bio-header">My Interests</p>
                <p class="bio-info">@(string.IsNullOrEmpty(Model.MyInterests) ? "No information" : Model.MyInterests)</p>
                <p class="bio-header">My Hobby</p>
                <p class="bio-info">@(string.IsNullOrEmpty(Model.MyHobby) ? "No information" : Model.MyHobby)</p>
            </div>
        </div>

        <div class="personal-card">
            <div class="profile-header">
                <p>Personal Information</p>
            </div>

            <div class="personal-details">
                <div class="top-info">
                    <div class="details-info">
                        <span class="personal-header">First Name</span>
                        <span class="personal-info">@Model.FirstName</span>
                    </div>
                    <div class="details-info">
                        <span class="personal-header">Last Name</span>
                        <span class="personal-info">@Model.LastName</span>
                    </div>
                </div>
                <div class="bottom-info">
                    <div class="details-info">
                        <span class="personal-header">Birth</span>
                        <span class="personal-info">@Model.DateOfBirth</span>
                    </div>
                    <div class="details-info">
                        <span class="personal-header">Gender</span>
                        <span class="personal-info">@Model.Gender</span>
                    </div>

                </div>

                @if (ViewBag.IsOwner)
                {
                    <div class="edit-profile-button">
                        <button onClick="location.href='@Url.Action("Edit", "Profile")'"> 
                            <img src="~/assets/edit.svg" alt="edit icon" class="edit-profile-img">
                            <p>Edit</p>
                        </button>
                    </div>
                }
                else if (friendStatus.Contains("friends")){
                    <div class="friend-button friend-red friend-text">
                    <p>@friendStatus</p>
                    <button onclick="removeFriend(this)" data-friend-id="@Model.UserId" friend-name="@Model.FirstName @Model.LastName">
                        <p>Remove Friend</p>
                    </button>
                </div>
                }
                else if(friendStatus == "Request sent")
                {
                    <div class="friend-button friend-yellow friend-text">
                        <p>waiting for their accept</p>
                        <button onclick="CancelRequest(this)" data-friend-id="@Model.UserId"> 
                            <p>Cancel Friend Request</p>
                        </button>
                    </div>
                }
                else if(friendStatus == "Request received")
                {
                    <div class="friend-approve friend-text">
                        <p>they want to be your friend</p>
                        <div class="approve-friend-button friend-green">
                            <button onclick="acceptFriendRequest(this)" data-friend-id="@Model.UserId"> 
                                <p>Accept</p>
                            </button>
                        </div>
                        <div class="approve-friend-button friend-red">
                            <button onclick="denyFriendRequest(this)" data-friend-id="@Model.UserId"> 
                                <p>Deny</p>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="friend-button">
                        <button onclick="addFriend(this)" data-friend-id="@Model.UserId"> 
                            <p>Add Friend</p>
                        </button>
                    </div>
                }
            </div>
        </div>  
    </div>
</div>

<script>
async function addFriend(button) {

    const friendId = button.getAttribute("data-friend-id");

    try {
        const response = await fetch("/friends/add", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({ friendId }),
        });

        if (response.ok) {
            console.log(`Friend request sent to Friend ID: ${friendId}`);
            location.reload();
            alert("Friend request has been sent!");
        } else {
            console.log("Friend request failed");
            alert("Failed to send friend request");
        }
    } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while sending the request");
    }
}
async function CancelRequest(button) {

    const friendId = button.getAttribute("data-friend-id");

    const response = await fetch("/friends/cancel", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ friendId })
    });

    if (response.ok) {
      alert("The friend request has been canceled!");
      location.reload();
    } else {
      alert("An error occurred, unable to cancel the friend request.");
    }
  }

async function acceptFriendRequest(button) {
    const friendId = button.getAttribute("data-friend-id");
    console.log(`Accepting friend request from Friend ID: ${friendId}`);
    const response = await fetch("/friends/accept-friend", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ friendId })
    });
    if (response.ok) {
      alert("Friend request accepted!");
      location.reload();
    } else {
      alert("Failed to accept friend request.");
      const errorText = await response.text();
      console.error(`Server Error: ${errorText}`);
    }
}

async function denyFriendRequest(button) {
    const friendId = button.getAttribute("data-friend-id");
    console.log(`Denying friend request from Friend ID: ${friendId}`);
    const response = await fetch("/friends/deny", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ friendId })
    });

    if (response.ok) {
      alert("Friend request denied!");
      location.reload();
    } else {
      alert("Failed to deny friend request.");
      const errorText = await response.text();
      console.error(`Server Error: ${errorText}`);
    }
}

  async function removeFriend(button) {

    const name = button.getAttribute("friend-name");

      const confirmDelete = confirm(`Are you sure you want to delete ${name} from your friend list?`);
      if (!confirmDelete) return;

      const friendId = button.getAttribute("data-friend-id");

      try {
          const response = await fetch(`/friends/remove`, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
              },
              body: JSON.stringify({ friendId }),
          });

          if (response.ok) {
              alert(`${name} has been removed from the friend list.`);
              location.reload();
          } else {
              alert("An error occurred while removing the friend.");
          }
      } catch (error) {
          console.error("Error:", error);
          alert("Unable to connect to the server.");
      }
  }
</script>