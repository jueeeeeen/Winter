using System;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Winter_Project.Models;

namespace Winter_Project.Services
{
    public class WebSocketHandler
{
    private static readonly Dictionary<string, WebSocket> _connections = new Dictionary<string, WebSocket>();
    private readonly IChatService _chatService;

    public WebSocketHandler(IChatService chatService)
    {
        _chatService = chatService;
    }

    public async Task HandleConnectionAsync(WebSocket webSocket, string username)
    {
        // Ensure that each new WebSocket connection is added uniquely
        if (!_connections.ContainsKey(username))
        {
            _connections.Add(username, webSocket);
        }

        Console.WriteLine("Current Connections:");
        foreach (var connection in _connections)
        {
            Console.WriteLine($"UserId: {connection.Key}, WebSocket State: {connection.Value.State}");
        }

        await ReceiveMessagesAsync(webSocket, username);
    }

    private async Task ReceiveMessagesAsync(WebSocket webSocket, string username)
    {
        var buffer = new byte[1024 * 4];
        WebSocketReceiveResult result;
        try
        {
            while (webSocket.State == WebSocketState.Open)
            {
                result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
                if (result.MessageType == WebSocketMessageType.Text)
                {
                    var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                    await BroadcastMessageAsync(message, username);
                }
            }
        }
        finally
        {
            _connections.Remove(username);
        }
    }

    private async Task BroadcastMessageAsync(string message, string username)
    {
        await _chatService.SaveMessageAsync(username, message);
        var buffer = Encoding.UTF8.GetBytes(username + ": " + message);
        foreach (var connection in _connections.Values)
        {
            if (connection.State == WebSocketState.Open)
            {
                await connection.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Text, true, CancellationToken.None);
            }
        }
    }
}
}